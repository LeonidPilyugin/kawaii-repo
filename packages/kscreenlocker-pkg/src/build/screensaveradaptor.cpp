/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -m -a screensaveradaptor -i interface.h -l ScreenLocker::Interface /home/leonid/github.com/LeonidPilyugin/kawaii-repo/packages/kscreenlocker-pkg/src/kscreenlocker-5.25.4/dbus/org.freedesktop.ScreenSaver.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "screensaveradaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class ScreenSaverAdaptor
 */

ScreenSaverAdaptor::ScreenSaverAdaptor(ScreenLocker::Interface *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

ScreenSaverAdaptor::~ScreenSaverAdaptor()
{
    // destructor
}

bool ScreenSaverAdaptor::GetActive()
{
    // handle method call org.freedesktop.ScreenSaver.GetActive
    return parent()->GetActive();
}

uint ScreenSaverAdaptor::GetActiveTime()
{
    // handle method call org.freedesktop.ScreenSaver.GetActiveTime
    return parent()->GetActiveTime();
}

uint ScreenSaverAdaptor::GetSessionIdleTime()
{
    // handle method call org.freedesktop.ScreenSaver.GetSessionIdleTime
    return parent()->GetSessionIdleTime();
}

uint ScreenSaverAdaptor::Inhibit(const QString &application_name, const QString &reason_for_inhibit)
{
    // handle method call org.freedesktop.ScreenSaver.Inhibit
    return parent()->Inhibit(application_name, reason_for_inhibit);
}

void ScreenSaverAdaptor::Lock()
{
    // handle method call org.freedesktop.ScreenSaver.Lock
    parent()->Lock();
}

bool ScreenSaverAdaptor::SetActive(bool e)
{
    // handle method call org.freedesktop.ScreenSaver.SetActive
    return parent()->SetActive(e);
}

void ScreenSaverAdaptor::SimulateUserActivity()
{
    // handle method call org.freedesktop.ScreenSaver.SimulateUserActivity
    parent()->SimulateUserActivity();
}

uint ScreenSaverAdaptor::Throttle(const QString &application_name, const QString &reason_for_inhibit)
{
    // handle method call org.freedesktop.ScreenSaver.Throttle
    return parent()->Throttle(application_name, reason_for_inhibit);
}

void ScreenSaverAdaptor::UnInhibit(uint cookie)
{
    // handle method call org.freedesktop.ScreenSaver.UnInhibit
    parent()->UnInhibit(cookie);
}

void ScreenSaverAdaptor::UnThrottle(uint cookie)
{
    // handle method call org.freedesktop.ScreenSaver.UnThrottle
    parent()->UnThrottle(cookie);
}


#include "screensaveradaptor.moc"
