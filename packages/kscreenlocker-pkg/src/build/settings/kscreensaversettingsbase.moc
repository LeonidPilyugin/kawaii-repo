/****************************************************************************
** Meta object code from reading C++ file 'kscreensaversettingsbase.h'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.15.5)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <memory>
#include "kscreensaversettingsbase.h"
#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'kscreensaversettingsbase.h' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.15.5. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_KScreenSaverSettingsBase_t {
    QByteArrayData data[26];
    char stringdata0[413];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_KScreenSaverSettingsBase_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_KScreenSaverSettingsBase_t qt_meta_stringdata_KScreenSaverSettingsBase = {
    {
QT_MOC_LITERAL(0, 0, 24), // "KScreenSaverSettingsBase"
QT_MOC_LITERAL(1, 25, 15), // "AutolockChanged"
QT_MOC_LITERAL(2, 41, 0), // ""
QT_MOC_LITERAL(3, 42, 14), // "TimeoutChanged"
QT_MOC_LITERAL(4, 57, 11), // "LockChanged"
QT_MOC_LITERAL(5, 69, 16), // "LockGraceChanged"
QT_MOC_LITERAL(6, 86, 19), // "LockOnResumeChanged"
QT_MOC_LITERAL(7, 106, 18), // "LockOnStartChanged"
QT_MOC_LITERAL(8, 125, 12), // "ThemeChanged"
QT_MOC_LITERAL(9, 138, 24), // "wallpaperPluginIdChanged"
QT_MOC_LITERAL(10, 163, 8), // "autolock"
QT_MOC_LITERAL(11, 172, 19), // "isAutolockImmutable"
QT_MOC_LITERAL(12, 192, 7), // "timeout"
QT_MOC_LITERAL(13, 200, 18), // "isTimeoutImmutable"
QT_MOC_LITERAL(14, 219, 4), // "lock"
QT_MOC_LITERAL(15, 224, 15), // "isLockImmutable"
QT_MOC_LITERAL(16, 240, 9), // "lockGrace"
QT_MOC_LITERAL(17, 250, 20), // "isLockGraceImmutable"
QT_MOC_LITERAL(18, 271, 12), // "lockOnResume"
QT_MOC_LITERAL(19, 284, 23), // "isLockOnResumeImmutable"
QT_MOC_LITERAL(20, 308, 11), // "lockOnStart"
QT_MOC_LITERAL(21, 320, 22), // "isLockOnStartImmutable"
QT_MOC_LITERAL(22, 343, 5), // "theme"
QT_MOC_LITERAL(23, 349, 16), // "isThemeImmutable"
QT_MOC_LITERAL(24, 366, 17), // "wallpaperPluginId"
QT_MOC_LITERAL(25, 384, 28) // "isWallpaperPluginIdImmutable"

    },
    "KScreenSaverSettingsBase\0AutolockChanged\0"
    "\0TimeoutChanged\0LockChanged\0"
    "LockGraceChanged\0LockOnResumeChanged\0"
    "LockOnStartChanged\0ThemeChanged\0"
    "wallpaperPluginIdChanged\0autolock\0"
    "isAutolockImmutable\0timeout\0"
    "isTimeoutImmutable\0lock\0isLockImmutable\0"
    "lockGrace\0isLockGraceImmutable\0"
    "lockOnResume\0isLockOnResumeImmutable\0"
    "lockOnStart\0isLockOnStartImmutable\0"
    "theme\0isThemeImmutable\0wallpaperPluginId\0"
    "isWallpaperPluginIdImmutable"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_KScreenSaverSettingsBase[] = {

 // content:
       8,       // revision
       0,       // classname
       0,    0, // classinfo
       8,   14, // methods
      16,   62, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       8,       // signalCount

 // signals: name, argc, parameters, tag, flags
       1,    0,   54,    2, 0x06 /* Public */,
       3,    0,   55,    2, 0x06 /* Public */,
       4,    0,   56,    2, 0x06 /* Public */,
       5,    0,   57,    2, 0x06 /* Public */,
       6,    0,   58,    2, 0x06 /* Public */,
       7,    0,   59,    2, 0x06 /* Public */,
       8,    0,   60,    2, 0x06 /* Public */,
       9,    0,   61,    2, 0x06 /* Public */,

 // signals: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

 // properties: name, type, flags
      10, QMetaType::Bool, 0x00495103,
      11, QMetaType::Bool, 0x00095401,
      12, QMetaType::Int, 0x00495103,
      13, QMetaType::Bool, 0x00095401,
      14, QMetaType::Bool, 0x00495103,
      15, QMetaType::Bool, 0x00095401,
      16, QMetaType::Int, 0x00495103,
      17, QMetaType::Bool, 0x00095401,
      18, QMetaType::Bool, 0x00495103,
      19, QMetaType::Bool, 0x00095401,
      20, QMetaType::Bool, 0x00495103,
      21, QMetaType::Bool, 0x00095401,
      22, QMetaType::QString, 0x00495103,
      23, QMetaType::Bool, 0x00095401,
      24, QMetaType::QString, 0x00495103,
      25, QMetaType::Bool, 0x00095401,

 // properties: notify_signal_id
       0,
       0,
       1,
       0,
       2,
       0,
       3,
       0,
       4,
       0,
       5,
       0,
       6,
       0,
       7,
       0,

       0        // eod
};

void KScreenSaverSettingsBase::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<KScreenSaverSettingsBase *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->AutolockChanged(); break;
        case 1: _t->TimeoutChanged(); break;
        case 2: _t->LockChanged(); break;
        case 3: _t->LockGraceChanged(); break;
        case 4: _t->LockOnResumeChanged(); break;
        case 5: _t->LockOnStartChanged(); break;
        case 6: _t->ThemeChanged(); break;
        case 7: _t->wallpaperPluginIdChanged(); break;
        default: ;
        }
    } else if (_c == QMetaObject::IndexOfMethod) {
        int *result = reinterpret_cast<int *>(_a[0]);
        {
            using _t = void (KScreenSaverSettingsBase::*)();
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&KScreenSaverSettingsBase::AutolockChanged)) {
                *result = 0;
                return;
            }
        }
        {
            using _t = void (KScreenSaverSettingsBase::*)();
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&KScreenSaverSettingsBase::TimeoutChanged)) {
                *result = 1;
                return;
            }
        }
        {
            using _t = void (KScreenSaverSettingsBase::*)();
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&KScreenSaverSettingsBase::LockChanged)) {
                *result = 2;
                return;
            }
        }
        {
            using _t = void (KScreenSaverSettingsBase::*)();
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&KScreenSaverSettingsBase::LockGraceChanged)) {
                *result = 3;
                return;
            }
        }
        {
            using _t = void (KScreenSaverSettingsBase::*)();
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&KScreenSaverSettingsBase::LockOnResumeChanged)) {
                *result = 4;
                return;
            }
        }
        {
            using _t = void (KScreenSaverSettingsBase::*)();
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&KScreenSaverSettingsBase::LockOnStartChanged)) {
                *result = 5;
                return;
            }
        }
        {
            using _t = void (KScreenSaverSettingsBase::*)();
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&KScreenSaverSettingsBase::ThemeChanged)) {
                *result = 6;
                return;
            }
        }
        {
            using _t = void (KScreenSaverSettingsBase::*)();
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&KScreenSaverSettingsBase::wallpaperPluginIdChanged)) {
                *result = 7;
                return;
            }
        }
    }
#ifndef QT_NO_PROPERTIES
    else if (_c == QMetaObject::ReadProperty) {
        auto *_t = static_cast<KScreenSaverSettingsBase *>(_o);
        (void)_t;
        void *_v = _a[0];
        switch (_id) {
        case 0: *reinterpret_cast< bool*>(_v) = _t->autolock(); break;
        case 1: *reinterpret_cast< bool*>(_v) = _t->isAutolockImmutable(); break;
        case 2: *reinterpret_cast< int*>(_v) = _t->timeout(); break;
        case 3: *reinterpret_cast< bool*>(_v) = _t->isTimeoutImmutable(); break;
        case 4: *reinterpret_cast< bool*>(_v) = _t->lock(); break;
        case 5: *reinterpret_cast< bool*>(_v) = _t->isLockImmutable(); break;
        case 6: *reinterpret_cast< int*>(_v) = _t->lockGrace(); break;
        case 7: *reinterpret_cast< bool*>(_v) = _t->isLockGraceImmutable(); break;
        case 8: *reinterpret_cast< bool*>(_v) = _t->lockOnResume(); break;
        case 9: *reinterpret_cast< bool*>(_v) = _t->isLockOnResumeImmutable(); break;
        case 10: *reinterpret_cast< bool*>(_v) = _t->lockOnStart(); break;
        case 11: *reinterpret_cast< bool*>(_v) = _t->isLockOnStartImmutable(); break;
        case 12: *reinterpret_cast< QString*>(_v) = _t->theme(); break;
        case 13: *reinterpret_cast< bool*>(_v) = _t->isThemeImmutable(); break;
        case 14: *reinterpret_cast< QString*>(_v) = _t->wallpaperPluginId(); break;
        case 15: *reinterpret_cast< bool*>(_v) = _t->isWallpaperPluginIdImmutable(); break;
        default: break;
        }
    } else if (_c == QMetaObject::WriteProperty) {
        auto *_t = static_cast<KScreenSaverSettingsBase *>(_o);
        (void)_t;
        void *_v = _a[0];
        switch (_id) {
        case 0: _t->setAutolock(*reinterpret_cast< bool*>(_v)); break;
        case 2: _t->setTimeout(*reinterpret_cast< int*>(_v)); break;
        case 4: _t->setLock(*reinterpret_cast< bool*>(_v)); break;
        case 6: _t->setLockGrace(*reinterpret_cast< int*>(_v)); break;
        case 8: _t->setLockOnResume(*reinterpret_cast< bool*>(_v)); break;
        case 10: _t->setLockOnStart(*reinterpret_cast< bool*>(_v)); break;
        case 12: _t->setTheme(*reinterpret_cast< QString*>(_v)); break;
        case 14: _t->setWallpaperPluginId(*reinterpret_cast< QString*>(_v)); break;
        default: break;
        }
    } else if (_c == QMetaObject::ResetProperty) {
    }
#endif // QT_NO_PROPERTIES
    (void)_a;
}

QT_INIT_METAOBJECT const QMetaObject KScreenSaverSettingsBase::staticMetaObject = { {
    QMetaObject::SuperData::link<KConfigSkeleton::staticMetaObject>(),
    qt_meta_stringdata_KScreenSaverSettingsBase.data,
    qt_meta_data_KScreenSaverSettingsBase,
    qt_static_metacall,
    nullptr,
    nullptr
} };


const QMetaObject *KScreenSaverSettingsBase::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *KScreenSaverSettingsBase::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_KScreenSaverSettingsBase.stringdata0))
        return static_cast<void*>(this);
    return KConfigSkeleton::qt_metacast(_clname);
}

int KScreenSaverSettingsBase::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = KConfigSkeleton::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 8)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 8;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 8)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 8;
    }
#ifndef QT_NO_PROPERTIES
    else if (_c == QMetaObject::ReadProperty || _c == QMetaObject::WriteProperty
            || _c == QMetaObject::ResetProperty || _c == QMetaObject::RegisterPropertyMetaType) {
        qt_static_metacall(this, _c, _id, _a);
        _id -= 16;
    } else if (_c == QMetaObject::QueryPropertyDesignable) {
        _id -= 16;
    } else if (_c == QMetaObject::QueryPropertyScriptable) {
        _id -= 16;
    } else if (_c == QMetaObject::QueryPropertyStored) {
        _id -= 16;
    } else if (_c == QMetaObject::QueryPropertyEditable) {
        _id -= 16;
    } else if (_c == QMetaObject::QueryPropertyUser) {
        _id -= 16;
    }
#endif // QT_NO_PROPERTIES
    return _id;
}

// SIGNAL 0
void KScreenSaverSettingsBase::AutolockChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 0, nullptr);
}

// SIGNAL 1
void KScreenSaverSettingsBase::TimeoutChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 1, nullptr);
}

// SIGNAL 2
void KScreenSaverSettingsBase::LockChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 2, nullptr);
}

// SIGNAL 3
void KScreenSaverSettingsBase::LockGraceChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 3, nullptr);
}

// SIGNAL 4
void KScreenSaverSettingsBase::LockOnResumeChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 4, nullptr);
}

// SIGNAL 5
void KScreenSaverSettingsBase::LockOnStartChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 5, nullptr);
}

// SIGNAL 6
void KScreenSaverSettingsBase::ThemeChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 6, nullptr);
}

// SIGNAL 7
void KScreenSaverSettingsBase::wallpaperPluginIdChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 7, nullptr);
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
